{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectWithoutProperties = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _asyncToGenerator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _awaitAsyncGenerator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar Client = require('../../lib/core');\n\nvar Service = require('./service');\n\nvar toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../..').HttpOptions} HttpOptions\n * @typedef {import('../../lib/core').ClientOptions} ClientOptions\n * @typedef {import('ipfs-core-types/src/basic').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API} API\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n *\n * @implements {API}\n */\n\n\nvar Remote = /*#__PURE__*/function () {\n  /**\n   * @param {ClientOptions} options\n   */\n  function Remote(options) {\n    _classCallCheck(this, Remote);\n\n    /** @private */\n    this.client = new Client(options);\n    /** @readonly */\n\n    this.service = new Service(options);\n  }\n  /**\n   * Stores an IPFS object(s) from a given path to a remote pinning service.\n   *\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   * @returns {Promise<Pin>}\n   */\n\n\n  _createClass(Remote, [{\n    key: \"add\",\n    value: function add(cid, options) {\n      return Remote.add(this.client, cid, options);\n    }\n    /**\n     * @param {Client} client\n     * @param {CID} cid\n     * @param {AddOptions & AbortOptions & HttpOptions} options\n     */\n\n  }, {\n    key: \"ls\",\n    value:\n    /**\n     * Returns a list of matching pins on the remote pinning service.\n     *\n     * @param {Query & AbortOptions & HttpOptions} query\n     */\n    function ls(query) {\n      return Remote.ls(this.client, query);\n    }\n    /**\n     *\n     * @param {Client} client\n     * @param {Query & AbortOptions & HttpOptions} options\n     * @returns {AsyncIterable<Pin>}\n     */\n\n  }, {\n    key: \"rm\",\n    value:\n    /**\n     * Removes a single pin object matching query allowing it to be garbage\n     * collected (if needed). Will error if multiple pins mtach provided\n     * query. To remove all matches use `rmAll` instead.\n     *\n     * @param {Query & AbortOptions & HttpOptions} query\n     */\n    function rm(query) {\n      return Remote.rm(this.client, _objectSpread(_objectSpread({}, query), {}, {\n        all: false\n      }));\n    }\n    /**\n     * Removes all pin object that match given query allowing them to be garbage\n     * collected if needed.\n     *\n     * @param {Query & AbortOptions & HttpOptions} query\n     */\n\n  }, {\n    key: \"rmAll\",\n    value: function rmAll(query) {\n      return Remote.rm(this.client, _objectSpread(_objectSpread({}, query), {}, {\n        all: true\n      }));\n    }\n    /**\n     *\n     * @param {Client} client\n     * @param {{all: boolean} & Query & AbortOptions & HttpOptions} options\n     */\n\n  }], [{\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(client, cid, _ref) {\n        var timeout, signal, headers, options, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                timeout = _ref.timeout, signal = _ref.signal, headers = _ref.headers, options = _objectWithoutProperties(_ref, [\"timeout\", \"signal\", \"headers\"]);\n                _context.next = 3;\n                return client.post('pin/remote/add', {\n                  timeout: timeout,\n                  signal: signal,\n                  headers: headers,\n                  searchParams: encodeAddParams(_objectSpread({\n                    cid: cid\n                  }, options))\n                });\n\n              case 3:\n                response = _context.sent;\n                _context.t0 = Remote;\n                _context.next = 7;\n                return response.json();\n\n              case 7:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", _context.t0.decodePin.call(_context.t0, _context.t1));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function add(_x, _x2, _x3) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * @param {Object} json\n     * @param {string} json.Name\n     * @param {string} json.Cid\n     * @param {Status} json.Status\n     * @returns {Pin}\n     */\n\n  }, {\n    key: \"decodePin\",\n    value: function decodePin(_ref2) {\n      var name = _ref2.Name,\n          status = _ref2.Status,\n          cid = _ref2.Cid;\n      return {\n        cid: new CID(cid),\n        name: name,\n        status: status\n      };\n    }\n  }, {\n    key: \"ls\",\n    value: function ls(client, _ref3) {\n      var timeout = _ref3.timeout,\n          signal = _ref3.signal,\n          headers = _ref3.headers,\n          query = _objectWithoutProperties(_ref3, [\"timeout\", \"signal\", \"headers\"]);\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var response, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, pin;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _awaitAsyncGenerator(client.post('pin/remote/ls', {\n                  signal: signal,\n                  timeout: timeout,\n                  headers: headers,\n                  searchParams: encodeQuery(query)\n                }));\n\n              case 2:\n                response = _context2.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context2.prev = 5;\n                _iterator = _asyncIterator(response.ndjson());\n\n              case 7:\n                _context2.next = 9;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 9:\n                _step = _context2.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context2.next = 13;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 13:\n                _value = _context2.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                pin = _value;\n                _context2.next = 18;\n                return Remote.decodePin(pin);\n\n              case 18:\n                _iteratorNormalCompletion = true;\n                _context2.next = 7;\n                break;\n\n              case 21:\n                _context2.next = 27;\n                break;\n\n              case 23:\n                _context2.prev = 23;\n                _context2.t0 = _context2[\"catch\"](5);\n                _didIteratorError = true;\n                _iteratorError = _context2.t0;\n\n              case 27:\n                _context2.prev = 27;\n                _context2.prev = 28;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context2.next = 32;\n                  break;\n                }\n\n                _context2.next = 32;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 32:\n                _context2.prev = 32;\n\n                if (!_didIteratorError) {\n                  _context2.next = 35;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 35:\n                return _context2.finish(32);\n\n              case 36:\n                return _context2.finish(27);\n\n              case 37:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[5, 23, 27, 37], [28,, 32, 36]]);\n      }))();\n    }\n  }, {\n    key: \"rm\",\n    value: function () {\n      var _rm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(client, _ref4) {\n        var timeout, signal, headers, query;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                timeout = _ref4.timeout, signal = _ref4.signal, headers = _ref4.headers, query = _objectWithoutProperties(_ref4, [\"timeout\", \"signal\", \"headers\"]);\n                _context3.next = 3;\n                return client.post('pin/remote/rm', {\n                  timeout: timeout,\n                  signal: signal,\n                  headers: headers,\n                  searchParams: encodeQuery(query)\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function rm(_x4, _x5) {\n        return _rm.apply(this, arguments);\n      }\n\n      return rm;\n    }()\n  }]);\n\n  return Remote;\n}();\n/**\n * @param {any} service\n * @returns {string}\n */\n\n\nvar encodeService = function encodeService(service) {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\n/**\n * @param {any} cid\n * @returns {string}\n */\n\n\nvar encodeCID = function encodeCID(cid) {\n  if (CID.isCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(\"CID instance expected instead of \".concat(cid));\n  }\n};\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\n\n\nvar encodeQuery = function encodeQuery(_ref5) {\n  var service = _ref5.service,\n      cid = _ref5.cid,\n      name = _ref5.name,\n      status = _ref5.status,\n      all = _ref5.all;\n  var query = toUrlSearchParams({\n    service: encodeService(service),\n    name: name,\n    force: all ? true : undefined\n  });\n\n  if (cid) {\n    var _iterator2 = _createForOfIteratorHelper(cid),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var value = _step2.value;\n        query.append('cid', encodeCID(value));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  if (status) {\n    var _iterator3 = _createForOfIteratorHelper(status),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _value2 = _step3.value;\n        query.append('status', _value2);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  return query;\n};\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\n\n\nvar encodeAddParams = function encodeAddParams(_ref6) {\n  var cid = _ref6.cid,\n      service = _ref6.service,\n      background = _ref6.background,\n      name = _ref6.name,\n      origins = _ref6.origins;\n  var params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name: name,\n    background: background ? true : undefined\n  });\n\n  if (origins) {\n    var _iterator4 = _createForOfIteratorHelper(origins),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var origin = _step4.value;\n        params.append('origin', origin.toString());\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n\n  return params;\n};\n\nmodule.exports = Remote;","map":{"version":3,"sources":["/home/piyush/Documents/GitHub/Dfarm/node_modules/ipfs-http-client/src/pin/remote/index.js"],"names":["CID","require","Client","Service","toUrlSearchParams","Remote","options","client","service","cid","add","query","ls","rm","all","timeout","signal","headers","post","searchParams","encodeAddParams","response","json","decodePin","name","Name","status","Status","Cid","encodeQuery","ndjson","pin","encodeService","TypeError","encodeCID","isCID","toString","force","undefined","value","append","background","origins","params","arg","origin","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst Client = require('../../lib/core')\nconst Service = require('./service')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../..').HttpOptions} HttpOptions\n * @typedef {import('../../lib/core').ClientOptions} ClientOptions\n * @typedef {import('ipfs-core-types/src/basic').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API} API\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n *\n * @implements {API}\n */\nclass Remote {\n  /**\n   * @param {ClientOptions} options\n   */\n  constructor (options) {\n    /** @private */\n    this.client = new Client(options)\n    /** @readonly */\n    this.service = new Service(options)\n  }\n\n  /**\n   * Stores an IPFS object(s) from a given path to a remote pinning service.\n   *\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   * @returns {Promise<Pin>}\n   */\n  add (cid, options) {\n    return Remote.add(this.client, cid, options)\n  }\n\n  /**\n   * @param {Client} client\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   */\n  static async add (client, cid, { timeout, signal, headers, ...options }) {\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({ cid, ...options })\n    })\n\n    return Remote.decodePin(await response.json())\n  }\n\n  /**\n   * @param {Object} json\n   * @param {string} json.Name\n   * @param {string} json.Cid\n   * @param {Status} json.Status\n   * @returns {Pin}\n   */\n  static decodePin ({ Name: name, Status: status, Cid: cid }) {\n    return {\n      cid: new CID(cid),\n      name,\n      status\n    }\n  }\n\n  /**\n   * Returns a list of matching pins on the remote pinning service.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n  ls (query) {\n    return Remote.ls(this.client, query)\n  }\n\n  /**\n   *\n   * @param {Client} client\n   * @param {Query & AbortOptions & HttpOptions} options\n   * @returns {AsyncIterable<Pin>}\n   */\n  static async * ls (client, { timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/ls', {\n      signal,\n      timeout,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n\n    for await (const pin of response.ndjson()) {\n      yield Remote.decodePin(pin)\n    }\n  }\n\n  /**\n   * Removes a single pin object matching query allowing it to be garbage\n   * collected (if needed). Will error if multiple pins mtach provided\n   * query. To remove all matches use `rmAll` instead.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n  rm (query) {\n    return Remote.rm(this.client, { ...query, all: false })\n  }\n\n  /**\n   * Removes all pin object that match given query allowing them to be garbage\n   * collected if needed.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n  rmAll (query) {\n    return Remote.rm(this.client, { ...query, all: true })\n  }\n\n  /**\n   *\n   * @param {Client} client\n   * @param {{all: boolean} & Query & AbortOptions & HttpOptions} options\n   */\n  static async rm (client, { timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nconst encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nconst encodeCID = (cid) => {\n  if (CID.isCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nconst encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nconst encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n\nmodule.exports = Remote\n"]},"metadata":{},"sourceType":"script"}