{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar _require = require('native-abort-controller'),\n    AbortController = _require.AbortController;\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {import('..').ImplementsMethod<'replace', import('ipfs-core/src/components/config')>}\n   */\n  var replace = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n      var options,\n          controller,\n          signal,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: options.timeout,\n                signal: signal,\n                searchParams: toUrlSearchParams(options)\n              };\n              _context.next = 8;\n              return multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers);\n\n            case 8:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 12;\n              return _context.t0.post.call(_context.t0, 'config/replace', _context.t4);\n\n            case 12:\n              res = _context.sent;\n              _context.next = 15;\n              return res.text();\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function replace(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return replace;\n});","map":{"version":3,"sources":["/home/piyush/Documents/GitHub/Dfarm/node_modules/ipfs-http-client/src/config/replace.js"],"names":["uint8ArrayFromString","require","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","replace","config","options","controller","signal","timeout","searchParams","JSON","stringify","headers","post","res","text"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,yBAAD,CAApC;;AACA,IAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAAhC;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAMI,WAAW,GAAGJ,OAAO,CAAC,qBAAD,CAA3B;;eAC4BA,OAAO,CAAC,yBAAD,C;IAA3BK,e,YAAAA,e;;AAERC,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,UAAAM,GAAG,EAAI;AAChC;AACF;AACA;AACE,MAAMC,OAAO;AAAA,wEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAeC,cAAAA,OAAf,2DAAyB,EAAzB;AACd;AACMC,cAAAA,UAFQ,GAEK,IAAIP,eAAJ,EAFL;AAGRQ,cAAAA,MAHQ,GAGCT,WAAW,CAACQ,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAHZ,EAKd;;AALc,4BAMIL,GANJ;AAAA;AAAA;AAOZM,gBAAAA,OAAO,EAAEH,OAAO,CAACG,OAPL;AAQZD,gBAAAA,MAAM,EAANA,MARY;AASZE,gBAAAA,YAAY,EAAEZ,iBAAiB,CAACQ,OAAD;AATnB;AAAA;AAAA,qBAWJV,gBAAgB,CAACF,oBAAoB,CAACiB,IAAI,CAACC,SAAL,CAAeP,MAAf,CAAD,CAArB,EAA+CE,UAA/C,EAA2DD,OAAO,CAACO,OAAnE,CAXZ;;AAAA;AAAA;AAAA;AAAA;AAAA,iCAMQC,IANR,mBAMa,gBANb;;AAAA;AAMRC,cAAAA,GANQ;AAAA;AAAA,qBAeRA,GAAG,CAACC,IAAJ,EAfQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPZ,OAAO;AAAA;AAAA;AAAA,KAAb;;AAkBA,SAAOA,OAAP;AACD,CAvByB,CAA1B","sourcesContent":["'use strict'\n\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'replace', import('ipfs-core/src/components/config')>}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('config/replace', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n"]},"metadata":{},"sourceType":"script"}