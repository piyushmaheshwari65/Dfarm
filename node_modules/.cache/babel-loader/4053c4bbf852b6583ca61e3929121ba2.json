{"ast":null,"code":"import _toConsumableArray from \"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/piyush/Documents/GitHub/Dfarm/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Dfarm from '../abis/Dfarm.json';\nimport Navbar from './Navbar';\nimport Main from './Main'; //Declare IPFS\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n\n    _this.captureFile = function (event) {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log('buffer', _this.state.buffer);\n      };\n    };\n\n    _this.uploadImage = function (description) {\n      console.log(\"Submitting file to ipfs...\"); //adding file to the IPFS\n\n      ipfs.add(_this.state.buffer, function (error, result) {\n        console.log('Ipfs result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        _this.setState({\n          loading: true\n        });\n\n        _this.state.dfarm.methods.uploadImage(result[0].hash, description).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      dfarm: null,\n      images: [],\n      loading: true\n    };\n    _this.uploadImage = _this.uploadImage.bind(_assertThisInitialized(_this));\n    _this.tipImageOwner = _this.tipImageOwner.bind(_assertThisInitialized(_this));\n    _this.captureFile = _this.captureFile.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, dfarm, imagesCount, i, image;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                }); // Network ID\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = Dfarm.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                dfarm = new web3.eth.Contract(Dfarm.abi, networkData.address);\n                this.setState({\n                  dfarm: dfarm\n                });\n                _context3.next = 14;\n                return dfarm.methods.imageCount().call();\n\n              case 14:\n                imagesCount = _context3.sent;\n                this.setState({\n                  imagesCount: imagesCount\n                }); // Load images\n\n                i = 1;\n\n              case 17:\n                if (!(i <= imagesCount)) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                _context3.next = 20;\n                return dfarm.methods.images(i).call();\n\n              case 20:\n                image = _context3.sent;\n                this.setState({\n                  images: [].concat(_toConsumableArray(this.state.images), [image])\n                });\n\n              case 22:\n                i++;\n                _context3.next = 17;\n                break;\n\n              case 25:\n                // Sort images. Show highest tipped images first\n                this.setState({\n                  images: this.state.images.sort(function (a, b) {\n                    return b.tipAmount - a.tipAmount;\n                  })\n                });\n                this.setState({\n                  loading: false\n                });\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert('Dfarm contract not deployed to detected network.');\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"tipImageOwner\",\n    value: function tipImageOwner(id, tipAmount) {\n      var _this2 = this;\n\n      this.setState({\n        loading: true\n      });\n      this.state.dfarm.methods.tipImageOwner(id).send({\n        from: this.state.account,\n        value: tipAmount\n      }).on('transactionHash', function (hash) {\n        _this2.setState({\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 59\n        }\n      }, \"Loading...\")) : /*#__PURE__*/React.createElement(Main, {\n        images: this.state.images,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        tipImageOwner: this.tipImageOwner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/piyush/Documents/GitHub/Dfarm/src/components/App.js"],"names":["React","Component","Web3","Dfarm","Navbar","Main","ipfsClient","require","ipfs","host","port","protocol","App","props","captureFile","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","uploadImage","description","add","error","loading","dfarm","methods","hash","send","from","account","on","images","bind","tipImageOwner","loadWeb3","loadBlockchainData","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","Contract","abi","address","imageCount","call","imagesCount","i","image","sort","a","b","tipAmount","id","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Web3 from 'web3';\nimport './App.css';\nimport Dfarm from '../abis/Dfarm.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = Dfarm.networks[networkId]\n    if(networkData) {\n      const dfarm = new web3.eth.Contract(Dfarm.abi, networkData.address)\n      this.setState({ dfarm})\n      const imagesCount = await dfarm.methods.imageCount().call()\n      this.setState({ imagesCount })\n      // Load images\n      for (var i = 1; i <= imagesCount; i++) {\n        const image = await dfarm.methods.images(i).call()\n        this.setState({\n          images: [...this.state.images, image]\n        })\n      }\n      // Sort images. Show highest tipped images first\n      this.setState({\n        images: this.state.images.sort((a,b) => b.tipAmount - a.tipAmount )\n      })\n      this.setState({ loading: false})\n    } else {\n      window.alert('Dfarm contract not deployed to detected network.')\n    }\n  }\n\n  captureFile = event => {\n\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  uploadImage = description => {\n    console.log(\"Submitting file to ipfs...\")\n\n    //adding file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      this.setState({ loading: true })\n      this.state.dfarm.methods.uploadImage(result[0].hash, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  tipImageOwner(id, tipAmount) {\n    this.setState({ loading: true })\n    this.state.dfarm.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dfarm: null,\n      images: [],\n      loading: true\n    }\n\n    this.uploadImage = this.uploadImage.bind(this)\n    this.tipImageOwner = this.tipImageOwner.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              images={this.state.images}\n              captureFile={this.captureFile}\n              uploadImage={this.uploadImage}\n              tipImageOwner={this.tipImageOwner}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}