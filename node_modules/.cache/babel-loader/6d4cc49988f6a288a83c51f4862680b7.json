{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar errCode = require('err-code');\n\nvar browserStreamToIt = require('browser-readablestream-to-it');\n\nvar itPeekable = require('it-peekable');\n\nvar map = require('it-map');\n\nvar _require = require('./utils'),\n    isBytes = _require.isBytes,\n    isBlob = _require.isBlob,\n    isReadableStream = _require.isReadableStream,\n    isFileObject = _require.isFileObject,\n    mtimeToObject = _require.mtimeToObject,\n    modeToNumber = _require.modeToNumber; // eslint-disable-next-line complexity\n\n/**\n * @typedef {import('ipfs-core-types/src/files').ToContent} ToContent\n */\n\n/**\n * @template {Blob|AsyncIterable<Uint8Array>} Content\n * @param {import('ipfs-core-types/src/files').ImportSource} input\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\n * @returns {AsyncIterable<import('ipfs-core-types/src/files').Entry<Content>>}\n */\n// eslint-disable-next-line complexity\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input, normaliseContent) {\n    var peekable, _yield$_awaitAsyncGen, value, done;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            if (!(typeof input === 'string' || input instanceof String)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return toFileObject(input.toString(), normaliseContent);\n\n          case 5:\n            return _context.abrupt(\"return\");\n\n          case 6:\n            if (!(isBytes(input) || isBlob(input))) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return toFileObject(input, normaliseContent);\n\n          case 9:\n            return _context.abrupt(\"return\");\n\n          case 10:\n            // Browser ReadableStream\n            if (isReadableStream(input)) {\n              input = browserStreamToIt(input);\n            } // Iterable<?>\n\n\n            if (!(input[Symbol.iterator] || input[Symbol.asyncIterator])) {\n              _context.next = 32;\n              break;\n            }\n\n            /** @type {any} peekable */\n            peekable = itPeekable(input);\n            /** @type {any} value **/\n\n            _context.next = 15;\n            return _awaitAsyncGenerator(peekable.peek());\n\n          case 15:\n            _yield$_awaitAsyncGen = _context.sent;\n            value = _yield$_awaitAsyncGen.value;\n            done = _yield$_awaitAsyncGen.done;\n\n            if (!done) {\n              _context.next = 21;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator([]), _awaitAsyncGenerator), \"t0\", 20);\n\n          case 20:\n            return _context.abrupt(\"return\");\n\n          case 21:\n            peekable.push(value); // (Async)Iterable<Number>\n            // (Async)Iterable<Bytes>\n\n            if (!(Number.isInteger(value) || isBytes(value))) {\n              _context.next = 26;\n              break;\n            }\n\n            _context.next = 25;\n            return toFileObject(peekable, normaliseContent);\n\n          case 25:\n            return _context.abrupt(\"return\");\n\n          case 26:\n            if (!(isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String)) {\n              _context.next = 29;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(peekable, function (value) {\n              return toFileObject(value, normaliseContent);\n            })), _awaitAsyncGenerator), \"t1\", 28);\n\n          case 28:\n            return _context.abrupt(\"return\");\n\n          case 29:\n            if (!(value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value))) {\n              _context.next = 32;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(peekable, function (value) {\n              return toFileObject(value, normaliseContent);\n            })), _awaitAsyncGenerator), \"t2\", 31);\n\n          case 31:\n            return _context.abrupt(\"return\");\n\n          case 32:\n            if (!isFileObject(input)) {\n              _context.next = 36;\n              break;\n            }\n\n            _context.next = 35;\n            return toFileObject(input, normaliseContent);\n\n          case 35:\n            return _context.abrupt(\"return\");\n\n          case 36:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function normaliseInput(_x, _x2) {\n    return _normaliseInput.apply(this, arguments);\n  }\n\n  return normaliseInput;\n}();\n/**\n * @template {Blob|AsyncIterable<Uint8Array>} Content\n * @param {import('ipfs-core-types/src/files').ToEntry} input\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\n * @returns {Promise<import('ipfs-core-types/src/files').Entry<Content>>}\n */\n\n\nfunction toFileObject(_x3, _x4) {\n  return _toFileObject.apply(this, arguments);\n}\n\nfunction _toFileObject() {\n  _toFileObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input, normaliseContent) {\n    var path, mode, mtime, content, file;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // @ts-ignore - Those properties don't exist on most input types\n            path = input.path, mode = input.mode, mtime = input.mtime, content = input.content;\n            file = {\n              path: path || '',\n              mode: modeToNumber(mode),\n              mtime: mtimeToObject(mtime)\n            };\n\n            if (!content) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 5;\n            return normaliseContent(content);\n\n          case 5:\n            file.content = _context2.sent;\n            _context2.next = 12;\n            break;\n\n          case 8:\n            if (path) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 11;\n            return normaliseContent(input);\n\n          case 11:\n            file.content = _context2.sent;\n\n          case 12:\n            return _context2.abrupt(\"return\", file);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _toFileObject.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/piyush/Documents/GitHub/Dfarm/node_modules/ipfs-http-client/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-input.js"],"names":["errCode","require","browserStreamToIt","itPeekable","map","isBytes","isBlob","isReadableStream","isFileObject","mtimeToObject","modeToNumber","module","exports","input","normaliseContent","undefined","Error","String","toFileObject","toString","Symbol","iterator","asyncIterator","peekable","peek","value","done","push","Number","isInteger","normaliseInput","path","mode","mtime","content","file"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst browserStreamToIt = require('browser-readablestream-to-it')\nconst itPeekable = require('it-peekable')\nconst map = require('it-map')\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject,\n  mtimeToObject,\n  modeToNumber\n} = require('./utils')\n\n// eslint-disable-next-line complexity\n\n/**\n * @typedef {import('ipfs-core-types/src/files').ToContent} ToContent\n */\n/**\n * @template {Blob|AsyncIterable<Uint8Array>} Content\n * @param {import('ipfs-core-types/src/files').ImportSource} input\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\n * @returns {AsyncIterable<import('ipfs-core-types/src/files').Entry<Content>>}\n */\n// eslint-disable-next-line complexity\nmodule.exports = async function * normaliseInput (input, normaliseContent) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent)\n    return\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value) || isBytes(value)) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<Blob>\n    // (Async)Iterable<String>\n    // (Async)Iterable<{ path, content }>\n    if (isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String) {\n      yield * map(peekable, (value) => toFileObject(value, normaliseContent))\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value)) {\n      yield * map(peekable, (value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js streams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @template {Blob|AsyncIterable<Uint8Array>} Content\n * @param {import('ipfs-core-types/src/files').ToEntry} input\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\n * @returns {Promise<import('ipfs-core-types/src/files').Entry<Content>>}\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-ignore - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  const file = { path: path || '', mode: modeToNumber(mode), mtime: mtimeToObject(mtime) }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-ignore - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n"]},"metadata":{},"sourceType":"script"}