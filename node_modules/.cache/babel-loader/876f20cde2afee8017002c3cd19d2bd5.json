{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Client = require('../../lib/core');\n\nvar toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../lib/core').ClientOptions} ClientOptions\n * @typedef {import('../..').HttpOptions} HttpOptions\n * @typedef {import('ipfs-core-types/src/basic').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API} API\n * @typedef {import('ipfs-core-types/src/pin/remote/service').Credentials} Credentials\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinService} RemotePinService\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n * @implements {API}\n */\n\n\nvar Service = /*#__PURE__*/function () {\n  /**\n   * @param {ClientOptions} options\n   */\n  function Service(options) {\n    _classCallCheck(this, Service);\n\n    /** @private */\n    this.client = new Client(options);\n  }\n  /**\n   * @param {Client} client\n   * @param {string} name\n   * @param {Credentials & AbortOptions & HttpOptions} options\n   */\n\n\n  _createClass(Service, [{\n    key: \"add\",\n    value:\n    /**\n     * Registers remote pinning service with a given name. Errors if service\n     * with the given name is already registered.\n     *\n     * @param {string} name\n     * @param {Credentials & AbortOptions & HttpOptions} options\n     */\n    function add(name, options) {\n      return Service.add(this.client, name, options);\n    }\n    /**\n     * Unregisteres remote pinning service with a given name. If service with such\n     * name isn't registerede this is a noop.\n     *\n     * @param {string} name\n     * @param {AbortOptions & HttpOptions} [options]\n     */\n\n  }, {\n    key: \"rm\",\n    value: function rm(name, options) {\n      return Service.rm(this.client, name, options);\n    }\n    /**\n     * List registered remote pinning services.\n     *\n     * @param {{ stat?: true } & AbortOptions & HttpOptions} [options]\n     */\n\n  }, {\n    key: \"ls\",\n    value: function ls(options) {\n      return Service.ls(this.client, options);\n    }\n  }], [{\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(client, name, options) {\n        var endpoint, key, headers, timeout, signal;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                endpoint = options.endpoint, key = options.key, headers = options.headers, timeout = options.timeout, signal = options.signal;\n                _context.next = 3;\n                return client.post('pin/remote/service/add', {\n                  timeout: timeout,\n                  signal: signal,\n                  searchParams: toUrlSearchParams({\n                    arg: [name, Service.encodeEndpoint(endpoint), key]\n                  }),\n                  headers: headers\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function add(_x, _x2, _x3) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * @param {URL} url\n     */\n\n  }, {\n    key: \"encodeEndpoint\",\n    value: function encodeEndpoint(url) {\n      var href = String(url);\n\n      if (href === 'undefined') {\n        throw Error('endpoint is required');\n      } // Workaround trailing `/` issue in go-ipfs\n      // @see https://github.com/ipfs/go-ipfs/issues/7826\n\n\n      return href[href.length - 1] === '/' ? href.slice(0, -1) : href;\n    }\n    /**\n     * @param {Client} client\n     * @param {string} name\n     * @param {AbortOptions & HttpOptions} [options]\n     */\n\n  }, {\n    key: \"rm\",\n    value: function () {\n      var _rm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(client, name) {\n        var _ref,\n            timeout,\n            signal,\n            headers,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _ref = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {}, timeout = _ref.timeout, signal = _ref.signal, headers = _ref.headers;\n                _context2.next = 3;\n                return client.post('pin/remote/service/rm', {\n                  timeout: timeout,\n                  signal: signal,\n                  headers: headers,\n                  searchParams: toUrlSearchParams({\n                    arg: name\n                  })\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function rm(_x4, _x5) {\n        return _rm.apply(this, arguments);\n      }\n\n      return rm;\n    }()\n    /**\n     * @template {true} Stat\n     * @param {Client} client\n     * @param {{ stat?: Stat } & AbortOptions & HttpOptions} [options]\n     */\n\n  }, {\n    key: \"ls\",\n    value: function () {\n      var _ls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(client) {\n        var _ref2,\n            stat,\n            timeout,\n            signal,\n            headers,\n            response,\n            _yield$response$json,\n            RemoteServices,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _ref2 = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {}, stat = _ref2.stat, timeout = _ref2.timeout, signal = _ref2.signal, headers = _ref2.headers;\n                _context3.next = 3;\n                return client.post('pin/remote/service/ls', {\n                  searchParams: stat === true ? toUrlSearchParams({\n                    stat: stat\n                  }) : undefined,\n                  timeout: timeout,\n                  signal: signal,\n                  headers: headers\n                });\n\n              case 3:\n                response = _context3.sent;\n                _context3.next = 6;\n                return response.json();\n\n              case 6:\n                _yield$response$json = _context3.sent;\n                RemoteServices = _yield$response$json.RemoteServices;\n                return _context3.abrupt(\"return\", RemoteServices.map(Service.decodeRemoteService));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function ls(_x6) {\n        return _ls.apply(this, arguments);\n      }\n\n      return ls;\n    }()\n    /**\n     * @param {Object} json\n     * @returns {RemotePinServiceWithStat}\n     */\n\n  }, {\n    key: \"decodeRemoteService\",\n    value: function decodeRemoteService(json) {\n      return _objectSpread({\n        service: json.Service,\n        endpoint: new URL(json.ApiEndpoint)\n      }, json.Stat && {\n        stat: Service.decodeStat(json.Stat)\n      });\n    }\n    /**\n     * @param {Object} json\n     * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n     */\n\n  }, {\n    key: \"decodeStat\",\n    value: function decodeStat(json) {\n      switch (json.Status) {\n        case 'valid':\n          {\n            var _json$PinCount = json.PinCount,\n                Pinning = _json$PinCount.Pinning,\n                Pinned = _json$PinCount.Pinned,\n                Queued = _json$PinCount.Queued,\n                Failed = _json$PinCount.Failed;\n            return {\n              status: 'valid',\n              pinCount: {\n                queued: Queued,\n                pinning: Pinning,\n                pinned: Pinned,\n                failed: Failed\n              }\n            };\n          }\n\n        case 'invalid':\n          {\n            return {\n              status: 'invalid'\n            };\n          }\n\n        default:\n          {\n            return {\n              status: json.Status\n            };\n          }\n      }\n    }\n  }]);\n\n  return Service;\n}();\n\nmodule.exports = Service;","map":{"version":3,"sources":["/home/piyush/Documents/GitHub/Dfarm/node_modules/ipfs-http-client/src/pin/remote/service.js"],"names":["Client","require","toUrlSearchParams","Service","options","client","name","add","rm","ls","endpoint","key","headers","timeout","signal","post","searchParams","arg","encodeEndpoint","url","href","String","Error","length","slice","stat","undefined","response","json","RemoteServices","map","decodeRemoteService","service","URL","ApiEndpoint","Stat","decodeStat","Status","PinCount","Pinning","Pinned","Queued","Failed","status","pinCount","queued","pinning","pinned","failed","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Client = require('../../lib/core')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../lib/core').ClientOptions} ClientOptions\n * @typedef {import('../..').HttpOptions} HttpOptions\n * @typedef {import('ipfs-core-types/src/basic').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API} API\n * @typedef {import('ipfs-core-types/src/pin/remote/service').Credentials} Credentials\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinService} RemotePinService\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n * @implements {API}\n */\nclass Service {\n  /**\n   * @param {ClientOptions} options\n   */\n  constructor (options) {\n    /** @private */\n    this.client = new Client(options)\n  }\n\n  /**\n   * @param {Client} client\n   * @param {string} name\n   * @param {Credentials & AbortOptions & HttpOptions} options\n   */\n  static async add (client, name, options) {\n    const { endpoint, key, headers, timeout, signal } = options\n    await client.post('pin/remote/service/add', {\n      timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [name, Service.encodeEndpoint(endpoint), key]\n      }),\n      headers\n    })\n  }\n\n  /**\n   * @param {URL} url\n   */\n  static encodeEndpoint (url) {\n    const href = String(url)\n    if (href === 'undefined') {\n      throw Error('endpoint is required')\n    }\n    // Workaround trailing `/` issue in go-ipfs\n    // @see https://github.com/ipfs/go-ipfs/issues/7826\n    return href[href.length - 1] === '/' ? href.slice(0, -1) : href\n  }\n\n  /**\n   * @param {Client} client\n   * @param {string} name\n   * @param {AbortOptions & HttpOptions} [options]\n   */\n  static async rm (client, name, { timeout, signal, headers } = {}) {\n    await client.post('pin/remote/service/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: toUrlSearchParams({\n        arg: name\n      })\n    })\n  }\n\n  /**\n   * @template {true} Stat\n   * @param {Client} client\n   * @param {{ stat?: Stat } & AbortOptions & HttpOptions} [options]\n   */\n  static async ls (client, { stat, timeout, signal, headers } = {}) {\n    const response = await client.post('pin/remote/service/ls', {\n      searchParams: stat === true ? toUrlSearchParams({ stat }) : undefined,\n      timeout,\n      signal,\n      headers\n    })\n\n    /** @type {{RemoteServices: Object[]}} */\n    const { RemoteServices } = await response.json()\n\n    /** @type {Stat extends true ? RemotePinServiceWithStat[] : RemotePinService []} */\n    return (RemoteServices.map(Service.decodeRemoteService))\n  }\n\n  /**\n   * @param {Object} json\n   * @returns {RemotePinServiceWithStat}\n   */\n  static decodeRemoteService (json) {\n    return {\n      service: json.Service,\n      endpoint: new URL(json.ApiEndpoint),\n      ...(json.Stat && { stat: Service.decodeStat(json.Stat) })\n    }\n  }\n\n  /**\n   * @param {Object} json\n   * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n   */\n  static decodeStat (json) {\n    switch (json.Status) {\n      case 'valid': {\n        const { Pinning, Pinned, Queued, Failed } = json.PinCount\n        return {\n          status: 'valid',\n          pinCount: {\n            queued: Queued,\n            pinning: Pinning,\n            pinned: Pinned,\n            failed: Failed\n          }\n        }\n      }\n      case 'invalid': {\n        return { status: 'invalid' }\n      }\n      default: {\n        return { status: json.Status }\n      }\n    }\n  }\n\n  /**\n   * Registers remote pinning service with a given name. Errors if service\n   * with the given name is already registered.\n   *\n   * @param {string} name\n   * @param {Credentials & AbortOptions & HttpOptions} options\n   */\n  add (name, options) {\n    return Service.add(this.client, name, options)\n  }\n\n  /**\n   * Unregisteres remote pinning service with a given name. If service with such\n   * name isn't registerede this is a noop.\n   *\n   * @param {string} name\n   * @param {AbortOptions & HttpOptions} [options]\n   */\n  rm (name, options) {\n    return Service.rm(this.client, name, options)\n  }\n\n  /**\n   * List registered remote pinning services.\n   *\n   * @param {{ stat?: true } & AbortOptions & HttpOptions} [options]\n   */\n  ls (options) {\n    return Service.ls(this.client, options)\n  }\n}\n\nmodule.exports = Service\n"]},"metadata":{},"sourceType":"script"}