{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar modeToString = require('../lib/mode-to-string');\n\nvar _require = require('ipfs-core-utils/src/files/normalise-input/utils'),\n    mtimeToObject = _require.mtimeToObject;\n\nvar configure = require('../lib/configure');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar _require2 = require('native-abort-controller'),\n    AbortController = _require2.AbortController;\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/write')>}\n   */\n  function write(_x, _x2) {\n    return _write.apply(this, arguments);\n  }\n\n  function _write() {\n    _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, input) {\n      var options,\n          controller,\n          signal,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: options.timeout,\n                signal: signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: path,\n                  streamChannels: true,\n                  count: options.length\n                }, options))\n              };\n              _context.next = 8;\n              return multipartRequest({\n                content: input,\n                path: 'arg',\n                mode: modeToString(options.mode),\n                mtime: mtimeToObject(options.mtime)\n              }, controller, options.headers);\n\n            case 8:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 12;\n              return _context.t0.post.call(_context.t0, 'files/write', _context.t4);\n\n            case 12:\n              res = _context.sent;\n              _context.next = 15;\n              return res.text();\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _write.apply(this, arguments);\n  }\n\n  return write;\n});","map":{"version":3,"sources":["/home/piyush/Documents/GitHub/Dfarm/node_modules/ipfs-http-client/src/files/write.js"],"names":["modeToString","require","mtimeToObject","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","api","write","path","input","options","controller","signal","timeout","searchParams","arg","streamChannels","count","length","content","mode","mtime","headers","post","res","text"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,uBAAD,CAA5B;;eAC0BA,OAAO,CAAC,iDAAD,C;IAAzBC,a,YAAAA,a;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAAhC;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,qBAAD,CAA3B;;gBAC4BA,OAAO,CAAC,yBAAD,C;IAA3BM,e,aAAAA,e;;AAERC,MAAM,CAACC,OAAP,GAAiBN,SAAS,CAAC,UAAAO,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,KAJiB;AAAA;AAAA;;AAAA;AAAA,sEAIhC,iBAAsBC,IAAtB,EAA4BC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmCC,cAAAA,OAAnC,2DAA6C,EAA7C;AACE;AACMC,cAAAA,UAFR,GAEqB,IAAIR,eAAJ,EAFrB;AAGQS,cAAAA,MAHR,GAGiBV,WAAW,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAH5B,EAKE;;AALF,4BAMoBN,GANpB;AAAA;AAAA;AAOIO,gBAAAA,OAAO,EAAEH,OAAO,CAACG,OAPrB;AAQID,gBAAAA,MAAM,EAANA,MARJ;AASIE,gBAAAA,YAAY,EAAEb,iBAAiB;AAC7Bc,kBAAAA,GAAG,EAAEP,IADwB;AAE7BQ,kBAAAA,cAAc,EAAE,IAFa;AAG7BC,kBAAAA,KAAK,EAAEP,OAAO,CAACQ;AAHc,mBAI1BR,OAJ0B;AATnC;AAAA;AAAA,qBAgBYV,gBAAgB,CAAC;AACrBmB,gBAAAA,OAAO,EAAEV,KADY;AAErBD,gBAAAA,IAAI,EAAE,KAFe;AAGrBY,gBAAAA,IAAI,EAAExB,YAAY,CAACc,OAAO,CAACU,IAAT,CAHG;AAIrBC,gBAAAA,KAAK,EAAEvB,aAAa,CAACY,OAAO,CAACW,KAAT;AAJC,eAAD,EAKnBV,UALmB,EAKPD,OAAO,CAACY,OALD,CAhB5B;;AAAA;AAAA;AAAA;AAAA;AAAA,iCAMwBC,IANxB,mBAM6B,aAN7B;;AAAA;AAMQC,cAAAA,GANR;AAAA;AAAA,qBAyBQA,GAAG,CAACC,IAAJ,EAzBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAgChC,SAAOlB,KAAP;AACD,CAjCyB,CAA1B","sourcesContent":["'use strict'\n\nconst modeToString = require('../lib/mode-to-string')\nconst { mtimeToObject } = require('ipfs-core-utils/src/files/normalise-input/utils')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/write')>}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('files/write', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest({\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: mtimeToObject(options.mtime)\n        }, controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return write\n})\n"]},"metadata":{},"sourceType":"script"}