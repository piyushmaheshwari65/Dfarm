{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar _require = require('./utils'),\n    findSources = _require.findSources;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/mv')>}\n   */\n  function mv() {\n    return _mv.apply(this, arguments);\n  }\n\n  function _mv() {\n    _mv = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _len,\n          args,\n          _key,\n          _findSources,\n          sources,\n          options,\n          res,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = _args[_key];\n              }\n\n              _findSources = findSources(args), sources = _findSources.sources, options = _findSources.options;\n              _context.next = 4;\n              return api.post('files/mv', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: sources.map(function (src) {\n                    return CID.isCID(src) ? \"/ipfs/\".concat(src) : src;\n                  })\n                }, options)),\n                headers: options.headers\n              });\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.text();\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _mv.apply(this, arguments);\n  }\n\n  return mv;\n});","map":{"version":3,"sources":["/home/piyush/Documents/GitHub/Dfarm/node_modules/ipfs-http-client/src/files/mv.js"],"names":["CID","require","findSources","configure","toUrlSearchParams","module","exports","api","mv","args","sources","options","post","timeout","signal","searchParams","arg","map","src","isCID","headers","res","text"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;eACwBA,OAAO,CAAC,SAAD,C;IAAvBC,W,YAAAA,W;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,EAJiB;AAAA;AAAA;;AAAA;AAAA,mEAIhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAsBC,IAAtB;AAAsBA,gBAAAA,IAAtB;AAAA;;AAAA,6BAC+BP,WAAW,CAACO,IAAD,CAD1C,EACUC,OADV,gBACUA,OADV,EACmBC,OADnB,gBACmBA,OADnB;AAAA;AAAA,qBAGoBJ,GAAG,CAACK,IAAJ,CAAS,UAAT,EAAqB;AACrCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADoB;AAErCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFqB;AAGrCC,gBAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,kBAAAA,GAAG,EAAEN,OAAO,CAACO,GAAR,CAAY,UAAAC,GAAG;AAAA,2BAAIlB,GAAG,CAACmB,KAAJ,CAAUD,GAAV,oBAA0BA,GAA1B,IAAkCA,GAAtC;AAAA,mBAAf;AADwB,mBAE1BP,OAF0B,EAHM;AAOrCS,gBAAAA,OAAO,EAAET,OAAO,CAACS;AAPoB,eAArB,CAHpB;;AAAA;AAGQC,cAAAA,GAHR;AAAA;AAAA,qBAaQA,GAAG,CAACC,IAAJ,EAbR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAoBhC,SAAOd,EAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { findSources } = require('./utils')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/mv')>}\n   */\n  async function mv (...args) {\n    const { sources, options } = findSources(args)\n\n    const res = await api.post('files/mv', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.map(src => CID.isCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return mv\n})\n"]},"metadata":{},"sourceType":"script"}