{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/piyush/Documents/GitHub/Dfarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar withIs = require('class-is');\n\nvar sortLinks = require('./sortLinks');\n\nvar DAGLink = require('../dag-link/dagLink');\n\nvar _require = require('../serialize.js'),\n    serializeDAGNode = _require.serializeDAGNode;\n\nvar _toDAGLink = require('./toDagLink');\n\nvar _addLink = require('./addLink');\n\nvar _rmLink = require('./rmLink');\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\nvar uint8ArrayToString = require('uint8arrays/to-string');\n\nvar DAGNode = /*#__PURE__*/function () {\n  function DAGNode(data) {\n    var links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var serializedSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, DAGNode);\n\n    if (!data) {\n      data = new Uint8Array(0);\n    }\n\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data);\n    }\n\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!');\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!');\n    }\n\n    links = links.map(function (link) {\n      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n    });\n    sortLinks(links);\n    Object.defineProperties(this, {\n      Data: {\n        value: data,\n        writable: false,\n        enumerable: true\n      },\n      Links: {\n        value: links,\n        writable: false,\n        enumerable: true\n      },\n      _serializedSize: {\n        value: serializedSize,\n        writable: true,\n        enumerable: false\n      },\n      _size: {\n        value: null,\n        writable: true,\n        enumerable: false\n      }\n    });\n  }\n\n  _createClass(DAGNode, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (!this._json) {\n        this._json = Object.freeze({\n          data: this.Data,\n          links: this.Links.map(function (l) {\n            return l.toJSON();\n          }),\n          size: this.size\n        });\n      }\n\n      return Object.assign({}, this._json);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"DAGNode <data: \\\"\".concat(uint8ArrayToString(this.Data, 'base64urlpad'), \"\\\", links: \").concat(this.Links.length, \", size: \").concat(this.size, \">\");\n    }\n  }, {\n    key: \"_invalidateCached\",\n    value: function _invalidateCached() {\n      this._serializedSize = null;\n      this._size = null;\n    }\n  }, {\n    key: \"addLink\",\n    value: function addLink(link) {\n      this._invalidateCached();\n\n      return _addLink(this, link);\n    }\n  }, {\n    key: \"rmLink\",\n    value: function rmLink(link) {\n      this._invalidateCached();\n\n      return _rmLink(this, link);\n    } // @returns {Promise.<DAGLink>}\n\n  }, {\n    key: \"toDAGLink\",\n    value: function toDAGLink(options) {\n      return _toDAGLink(this, options);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return serializeDAGNode(this);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      if (this._size === null) {\n        if (this._serializedSize === null) {\n          this._serializedSize = this.serialize().length;\n        }\n\n        this._size = this.Links.reduce(function (sum, l) {\n          return sum + l.Tsize;\n        }, this._serializedSize);\n      }\n\n      return this._size;\n    },\n    set: function set(size) {\n      throw new Error(\"Can't set property: 'size' is immutable\");\n    }\n  }]);\n\n  return DAGNode;\n}();\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});","map":{"version":3,"sources":["/home/piyush/Documents/GitHub/Dfarm/node_modules/ipld-dag-pb/src/dag-node/dagNode.js"],"names":["withIs","require","sortLinks","DAGLink","serializeDAGNode","toDAGLink","addLink","rmLink","uint8ArrayFromString","uint8ArrayToString","DAGNode","data","links","serializedSize","Uint8Array","Error","map","link","isDAGLink","util","createDagLinkFromB58EncodedHash","Object","defineProperties","Data","value","writable","enumerable","Links","_serializedSize","_size","_json","freeze","l","toJSON","size","assign","length","_invalidateCached","options","serialize","reduce","sum","Tsize","exports","module","className","symbolName"],"mappings":"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","sourcesContent":["'use strict'\n\nconst withIs = require('class-is')\nconst sortLinks = require('./sortLinks')\nconst DAGLink = require('../dag-link/dagLink')\nconst { serializeDAGNode } = require('../serialize.js')\nconst toDAGLink = require('./toDagLink')\nconst addLink = require('./addLink')\nconst rmLink = require('./rmLink')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\nclass DAGNode {\n  constructor (data, links = [], serializedSize = null) {\n    if (!data) {\n      data = new Uint8Array(0)\n    }\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data)\n    }\n\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!')\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!')\n    }\n\n    links = links.map((link) => {\n      return DAGLink.isDAGLink(link)\n        ? link\n        : DAGLink.util.createDagLinkFromB58EncodedHash(link)\n    })\n    sortLinks(links)\n\n    Object.defineProperties(this, {\n      Data: { value: data, writable: false, enumerable: true },\n      Links: { value: links, writable: false, enumerable: true },\n      _serializedSize: { value: serializedSize, writable: true, enumerable: false },\n      _size: { value: null, writable: true, enumerable: false }\n    })\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this.Links.map((l) => l.toJSON()),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <data: \"${uint8ArrayToString(this.Data, 'base64urlpad')}\", links: ${this.Links.length}, size: ${this.size}>`\n  }\n\n  _invalidateCached () {\n    this._serializedSize = null\n    this._size = null\n  }\n\n  addLink (link) {\n    this._invalidateCached()\n    return addLink(this, link)\n  }\n\n  rmLink (link) {\n    this._invalidateCached()\n    return rmLink(this, link)\n  }\n\n  // @returns {Promise.<DAGLink>}\n  toDAGLink (options) {\n    return toDAGLink(this, options)\n  }\n\n  serialize () {\n    return serializeDAGNode(this)\n  }\n\n  get size () {\n    if (this._size === null) {\n      if (this._serializedSize === null) {\n        this._serializedSize = this.serialize().length\n      }\n      this._size = this.Links.reduce((sum, l) => sum + l.Tsize, this._serializedSize)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\n"]},"metadata":{},"sourceType":"script"}